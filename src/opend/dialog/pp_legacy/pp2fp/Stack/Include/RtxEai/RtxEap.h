/*
 * Copyright (c) by RTX A/S, Denmark
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of RTX A/S nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef RTXEAP_H
#define RTXEAP_H

/****************************************************************************
*                               Include files
****************************************************************************/

/****************************************************************************
*                              Macro definitions
****************************************************************************/
#ifndef RS_PACKED_STRUCT_BEGIN
  #define RS_PACKED_STRUCT_BEGIN struct
#endif

#ifndef RS_PACKED_STRUCT_END
  #define RS_PACKED_STRUCT_END(name) name
#endif

#if (defined(RSX) || defined(RTX_EAP_DEFINE_PRIMITIVES))
// 20110120/LEH: This list can no longer be properly autogenerated.
#define RTX_EAP_TEST_CONNECTION_PING_PONG_IND 0xFF00

#define RTX_EAP_TRACE_START_REQ               0xF000
#define RTX_EAP_TRACE_START_CFM               0xF001
#define RTX_EAP_TRACE_STOP_REQ                0xF002
#define RTX_EAP_TRACE_STOP_CFM                0xF003
#define RTX_EAP_TRACE_DOWNLOAD_REQ            0xF004
#define RTX_EAP_TRACE_DOWNLOAD_CFM            0xF005
#define RTX_EAP_TRACE_DOWNLOAD_START_REQ      0xF006
#define RTX_EAP_TRACE_START_TIMER_IND         0xF007
#define RTX_EAP_TRACE_STOP_TIMER_IND          0xF008
#define RTX_EAP_TRACE_OUTPUT_MAIL_IND         0xF009
#define RTX_EAP_TRACE_INPUT_MAIL_IND          0xF00A
#define RTX_EAP_TRACE_COMMENT_IND             0xF00B
#define RTX_EAP_TRACE_STOP_IND                0xF00C
#define RTX_EAP_TRACE_PDU_IND                 0xF00D
#define RTX_EAP_TRACE_FUNCTION_IND            0xF00E
#define RTX_EAP_TRACE_DATA_IND                0xF00F
#define RTX_EAP_TRACE_IND                     0xF010
#define RTX_EAP_RUNTIME_ERROR_IND             0xF011
#define RTX_EAP_ASSERT_IND                    0xF012
#define RTX_EAP_TRACE_TIME_INPUT_MAIL_IND     0xF013
#define RTX_EAP_TRACE_TIME_OUTPUT_MAIL_IND    0xF014
#define RTX_EAP_RESERVED_MAIL_2               0xF015
#define RTX_EAP_TRACE_TIME_START_TIMER_IND    0xF016
#define RTX_EAP_TRACE_TIME_STOP_TIMER_IND     0xF017
#define RTX_EAP_RESERVED_MAIL_1               0xF018
#define RTX_EAP_TARGET_TIME_INFO_IND          0xF019
#define RTX_EAP_TRACE_COMMENT2_IND            0xF01A
#define RTX_EAP_TRACE_TIME_COMMENT2_IND       0xF01B

#define RTX_EAP_AFIELD_START_REQ                0xF020
#define RTX_EAP_AFIELD_START_CFM                0xF021
#define RTX_EAP_AFIELD_STOP_REQ                 0xF022
#define RTX_EAP_AFIELD_STOP_CFM                 0xF023
#define RTX_EAP_AFIELD_DATA_FP_RX_IND           0xF024
#define RTX_EAP_AFIELD_DATA_FP_TX_IND           0xF025
#define RTX_EAP_AFIELD_DATA_PP_RX_IND           0xF026
#define RTX_EAP_AFIELD_DATA_PP_TX_IND           0xF027
#define RTX_EAP_A_B_FULL_SLOT_DATA_FP_RX_IND    0xF028
#define RTX_EAP_A_B_FULL_SLOT_DATA_FP_TX_IND    0xF029
#define RTX_EAP_A_B_FULL_SLOT_DATA_PP_RX_IND    0xF02A
#define RTX_EAP_A_B_FULL_SLOT_DATA_PP_TX_IND    0xF02B
#define RTX_EAP_A_B_DOUBLE_SLOT_DATA_FP_RX_IND  0xF02C
#define RTX_EAP_A_B_DOUBLE_SLOT_DATA_FP_TX_IND  0xF02D
#define RTX_EAP_A_B_DOUBLE_SLOT_DATA_PP_RX_IND  0xF02E
#define RTX_EAP_A_B_DOUBLE_SLOT_DATA_PP_TX_IND  0xF02F
#define RTX_EAP_RAM_WRITE_REQ                   0xF030
#define RTX_EAP_RAM_READ_REQ                    0xF031
#define RTX_EAP_RAM_READ_CFM                    0xF032
#define RTX_EAP_RAM_WRITE_CFM                   0xF033
#define RTX_EAP_RAM_MEMSET_REQ                  0xF034
#define RTX_EAP_RAM_MEMSET_CFM                  0xF035
#define RTX_EAP_MEMORY_WRITE_WORD_REQ           0xF036
#define RTX_EAP_MEMORY_WRITE_WORD_CFM           0xF037

#define RTX_EAP_TRACE_INPUT_MAIL2_IND       0xF03C
#define RTX_EAP_TRACE_TIME_INPUT_MAIL2_IND  0xF03D

#define RTX_EAP_BMC_TRACE_START_REQ                 0xF040
#define RTX_EAP_BMC_TRACE_START_CFM                 0xF041
#define RTX_EAP_BMC_TRACE_STOP_REQ                  0xF042
#define RTX_EAP_BMC_TRACE_STOP_CFM                  0xF043
#define RTX_EAP_BMC_TRACE_MSG_IND                   0xF044
#define RTX_EAP_BMC_TRACE_START_REQ_MULTIBEARER     0xF045
#define RTX_EAP_BMC_TRACE_MSG_IND_MULTIBEARER       0xF046
#define RTX_EAP_BMC_TIME_TRACE_MSG_IND              0xF047
#define RTX_EAP_BMC_TIME_TRACE_MSG_IND_MULTIBEARER  0xF048

#define RTX_EAP_BMC_TRACE_EVENT_IND           0xF04F
#define RTX_EAP_BMC_TRACE_TIME_EVENT_IND      0xF050
#define RTX_EAP_BMC_TRACE_START_REQ_FP_SYNC   0xF051

//#define RTX_EAP_TRACE_CREATE_RT_TIMER_IND     0xF050 > 0xF1A0
//#define RTX_EAP_TRACE_DESTROY_RT_TIMER_IND    0xF051 > 0xF1A1
//#define RTX_EAP_TRACE_START_RT_TIMER_IND      0xF052 > 0xF1A2
//#define RTX_EAP_TRACE_STOP_RT_TIMER_IND       0xF053 > 0xF1A3
#define RTX_EAP_TRACE_TIME_START_EXTIMER_IND  0xF054
#define RTX_EAP_TRACE_START_EXTIMER_IND       0xF055
#define RTX_EAP_TRACE_TIME_STOP_EXTIMER_IND   0xF056
#define RTX_EAP_TRACE_STOP_EXTIMER_IND        0xF057

#define RTX_EAP_MODULE_TEST_START_REQ 0xF060
#define RTX_EAP_MODULE_TEST_STOP_REQ  0xF061
#define RTX_EAP_PROJECT_TEST_REQ      0xF062
#define RTX_EAP_PROJECT_TEST_CFM      0xF063
#define RTX_EAP_RF_TEST_REQ           0xF064
#define RTX_EAP_RF_TEST_CFM           0xF065
#define RTX_EAP_HW_TEST_REQ           0xF066
#define RTX_EAP_HW_TEST_CFM           0xF067
#define RTX_EAP_SW_TEST_REQ           0xF068
#define RTX_EAP_SW_TEST_CFM           0xF069
#define RTX_EAP_AUDIO_IND             0xF06A

#define RTX_EAP_PRINTF_START_REQ        0xF070
#define RTX_EAP_PRINTF_START_REQ_NO_CFM 0xF071
#define RTX_EAP_PRINTF_START_CFM        0xF072
#define RTX_EAP_PRINTF_STOP_REQ         0xF073
#define RTX_EAP_PRINTF_STOP_CFM         0xF074
#define RTX_EAP_PRINTF_IND              0xF075
#define RTX_EAP_CLEAR_SCREEN_IND        0xF076
#define RTX_EAP_SCREEN_GOTOXY_IND       0xF077

//#define RTX_EAP_TRACE_MEM_ALLOC_IND   0xF0B0 > 0xF1B0
//#define RTX_EAP_TRACE_MEM_FREE_IND    0xF0B1 > 0xF1B1
//#define RTX_EAP_TRACE_ADD_WATCH_IND   0xF0B2 > 0xF1B2
//#define RTX_EAP_GRAPH_DATA_IND        0xF0B3 > 0xF1B3
//#define RTX_EAP_GRAPH_UPDATE_IND      0xF0B4 > 0xF1B4
//#define RTX_EAP_KEY_PRESS_REQ         0xF0B5 > 0xF1B5
//#define RTX_EAP_KEY_PRESS_CFM         0xF0B6 > 0xF1B6
//#define RTX_EAP_ADD_GRAPH_IND         0xF0B7 > 0xF1B7
//#define RTX_EAP_ADD_LINE_TO_GRAPH_IND 0xF0B8 > 0xF1B8
//#define RTX_EAP_REMOVE_GRAPH_IND      0xF0B9 > 0xF1B9

#define RTX_EAP_TRACE_TIME_PDU_IND      0xF0C0
#define RTX_EAP_TRACE_TIME_FUNCTION_IND 0xF0C1
#define RTX_EAP_TRACE_TIME_DATA_IND     0xF0C2
#define RTX_EAP_TRACE_TIME_IND          0xF0C3
#define RTX_EAP_TRACE_TIME_A_B_LONG_SLOT_DATA_FP_RX_IND 0xF0C4
#define RTX_EAP_TRACE_TIME_A_B_LONG_SLOT_DATA_FP_TX_IND 0xF0C5
#define RTX_EAP_TRACE_TIME_A_B_LONG_SLOT_DATA_PP_RX_IND 0xF0C6
#define RTX_EAP_TRACE_TIME_A_B_LONG_SLOT_DATA_PP_TX_IND 0xF0C7
#define RTX_EAP_A_B_LONG_SLOT_DATA_FP_RX_IND            0xF0C8
#define RTX_EAP_A_B_LONG_SLOT_DATA_FP_TX_IND            0xF0C9
#define RTX_EAP_A_B_LONG_SLOT_DATA_PP_RX_IND            0xF0CA
#define RTX_EAP_A_B_LONG_SLOT_DATA_PP_TX_IND            0xF0CB

#define RTX_EAP_MEMORY_READ_REQ         0xF0E0
#define RTX_EAP_MEMORY_READ_CFM         0xF0E1
#define RTX_EAP_MEMORY_WRITE_REQ        0xF0E2
#define RTX_EAP_MEMORY_WRITE_CFM        0xF0E3
#define RTX_EAP_MEMORY_MEMSET_REQ       0xF0E4
#define RTX_EAP_MEMORY_MEMSET_CFM       0xF0E5
#define RTX_EAP_MEMORY_SET_DEFAULT_REQ  0xF0E6
#define RTX_EAP_MEMORY_SET_DEFAULT_CFM  0xF0E7

#define RTX_EAP_VERSION_REQ       0xF0F0
#define RTX_EAP_VERSION_CFM       0xF0F1
#define RTX_EAP_SW_BUILD_INFO_REQ 0xF0F2
#define RTX_EAP_SW_BUILD_INFO_CFM 0xF0F3
#define RTX_EAP_TARGET_RESET_IND  0xF0F4
#define RTX_EAP_PACKET_CFM        0xF0F5
#define RTX_EAP_PACKET_ERROR_IND  0xF0F6

#define RTX_EAP_NVS_CACHE_EMPTY_REQ     0xF117
#define RTX_EAP_NVS_CACHE_EMPTY_CFM     0xF118
#define RTX_EAP_NVS_SET_DEFAULT_REQ     0xF119
#define RTX_EAP_NVS_SET_DEFAULT_CFM     0xF11A
#define RTX_EAP_NVS_READ_REQ            0xF11B
#define RTX_EAP_NVS_READ_CFM            0xF11C
#define RTX_EAP_NVS_WRITE_REQ           0xF11D
#define RTX_EAP_NVS_WRITE_CFM           0xF11E
#define RTX_EAP_NVS_SET_DOMAIN_REQ      0xF11F
#define RTX_EAP_NVS_SET_DOMAIN_CFM      0xF120
#define RTX_EAP_NVS_GET_DOMAIN_SIZE_REQ 0xF121
#define RTX_EAP_NVS_GET_DOMAIN_SIZE_CFM 0xF122

#define RTX_EAP_TRACESERVER_GET_LIST_REQ        0xF180
#define RTX_EAP_TRACESERVER_GET_LIST_CFM        0xF181
#define RTX_EAP_TRACESERVER_SELECT_TARGET_REQ   0xF182
#define RTX_EAP_TRACESERVER_SELECT_TARGET_CFM   0xF183
#define RTX_EAP_TRACESERVER_SELECT_TARGET_REJ   0xF184
#define RTX_EAP_TRACESERVER_TARGET_DESC_IND     0xF185
#define RTX_EAP_TRACESERVER_CONNECT_TARGET_REQ  0xF186
#define RTX_EAP_TRACESERVER_CONNECT_TARGET_CFM  0xF187
#define RTX_EAP_TRACESERVER_CONNECT_TARGET_REJ  0xF188

#define RTX_EAP_TRACE_CREATE_RT_TIMER_IND   0xF1A0
#define RTX_EAP_TRACE_DESTROY_RT_TIMER_IND  0xF1A1
#define RTX_EAP_TRACE_START_RT_TIMER_IND    0xF1A2
#define RTX_EAP_TRACE_STOP_RT_TIMER_IND     0xF1A3

#define RTX_EAP_TRACE_MEM_ALLOC_IND   0xF1B0
#define RTX_EAP_TRACE_MEM_FREE_IND    0xF1B1
#define RTX_EAP_TRACE_ADD_WATCH_IND   0xF1B2
#define RTX_EAP_GRAPH_DATA_IND        0xF1B3
#define RTX_EAP_GRAPH_UPDATE_IND      0xF1B4
#define RTX_EAP_KEY_PRESS_REQ         0xF1B5
#define RTX_EAP_KEY_PRESS_CFM         0xF1B6
#define RTX_EAP_ADD_GRAPH_IND         0xF1B7
#define RTX_EAP_ADD_LINE_TO_GRAPH_IND 0xF1B8
#define RTX_EAP_REMOVE_GRAPH_IND      0xF1B9

#define RTX_EAP_FPSYNC_SLAVE_DBG_START_REQ   0xF1BF
#define RTX_EAP_FPSYNC_SLAVE_DBG_START_CFM   0xF1BA
#define RTX_EAP_FPSYNC_SLAVE_DBG_START_REJ   0xF1BB
#define RTX_EAP_FPSYNC_SLAVE_DBG_INFO_REQ   0xF1BC
#define RTX_EAP_FPSYNC_SLAVE_DBG_INFO_CFM   0xF1BD
#define RTX_EAP_FPSYNC_SLAVE_DBG_UPDATE_IND   0xF1BE
#define RTX_EAP_FPSYNC_SLAVE_DBG_STOP_REQ   0xF1C0
#define RTX_EAP_FPSYNC_SLAVE_DBG_STOP_CFM   0xF1C1

#endif

/****************************************************************************
*                     Enumerations/Type definitions/Structs
****************************************************************************/

#if (RTX_CORE_VERSION >= 0x0224)
  #include <Standard/Common/RsPushPack1.h>
#else
  #ifdef RTX_EAP_INCLUDE_ALIGN_HEADER_FILE
    #include <Modules/Defines/Align1.h> // used to set byte alignment with #pragma
  #endif
#endif

#if RS_ENDIAN_TYPE == RS_BIG_ENDIAN
  #define RTX_EAP_UINT8_HANDLING_IN_INTERFACE
#endif

#ifdef RTX_EAP_UINT8_HANDLING_IN_INTERFACE
  #define RTX_EAP_UINT16_DEF(DefName)                    rsuint8 Def16_0_##DefName; rsuint8 Def16_1_##DefName
  #define RTX_EAP_UINT32_DEF(DefName)                    rsuint8 Def32_0_##DefName; rsuint8 Def32_1_##DefName; rsuint8 Def32_2_##DefName; rsuint8 Def32_3_##DefName
  #define RTX_EAP_ASSIGN_UINT16(p, DefName, uint16Value) p->Def16_0_##DefName = (rsuint8)(0xFF&(uint16Value)); p->Def16_1_##DefName = (rsuint8)(((rsuint16)(uint16Value))>>8)
  #define RTX_EAP_ASSIGN_UINT32(p, DefName, uint32Value) p->Def32_0_##DefName = (rsuint8)(0xFF&(uint32Value)); p->Def32_1_##DefName = (rsuint8)(((rsuint32)(uint32Value))>>8);p->Def32_2_##DefName = (rsuint8)(((rsuint32)(uint32Value))>>16);p->Def32_3_##DefName = (rsuint8)(((rsuint32)(uint32Value))>>24)
  #define RTX_EAP_GET_UINT16(M, MailType, DefName)       (rsuint16)(((((MailType*)M)->Def16_0_##DefName)<<0) | \
                                                                  ((((MailType*)M)->Def16_1_##DefName)<<8)   \
                                                                 )
  #define RTX_EAP_GET_UINT32(M, MailType, DefName)       (rsuint32)((((rsuint32)(((MailType*)M)->Def32_0_##DefName))<<0)  | \
                                                                  (((rsuint32)(((MailType*)M)->Def32_1_##DefName))<<8)  | \
                                                                  (((rsuint32)(((MailType*)M)->Def32_2_##DefName))<<16) | \
                                                                  (((rsuint32)(((MailType*)M)->Def32_3_##DefName))<<24) \
                                                                 )
#else
  #if (defined (TARGET_TYPE) && (TARGET_TYPE == TARGET_BLACKFIN_21535))
    #error Compiler option RTX_EAP_UINT8_HANDLING_IN_INTERFACE must be set
  #endif

  #define RTX_EAP_UINT16_DEF(DefName)                    rsuint16 DefName
  #define RTX_EAP_UINT32_DEF(DefName)                    rsuint32 DefName
  #define RTX_EAP_ASSIGN_UINT16(p, DefName, uint16Value) p->DefName = uint16Value
  #define RTX_EAP_ASSIGN_UINT32(p, DefName, uint32Value) p->DefName = uint32Value
  #define RTX_EAP_GET_UINT16(M, MailType, DefName)       ((MailType *)M)->DefName
  #define RTX_EAP_GET_UINT32(M, MailType, DefName)       ((MailType *)M)->DefName
#endif

/* This struct defines the generic payload part of an EAP data packet. */
typedef RS_PACKED_STRUCT_BEGIN
{
  rsuint8 ProgramId;     /* Destination ProgramId. */
  rsuint8 TaskId;        /* Destination TaskId. */
  rsuint8 Message[1];    /* The message. Primitive (16 bits) followed by
                            optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapPayloadType);

/* This enumeration defines the reserved Program ID?s. Please use these
   definitions whenever a Program ID is referred to in the source code. */
typedef enum
{
  RTX_EAP_PID_RSX = 0x00, /* Default program id used by RSX */
  RTX_EAP_PID_RTX_MONITOR = 0x00, /* Default program id used by the RTX Monitor. */
  RTX_EAP_PID_SENDMAIL = 0x01, /* The program id used by SendMail. This program id should be used in the
                                  target when mails are returned to SendMail on the PC. */
  RTX_EAP_PID_FIRST_DYNAMIC_PID = 0x80, /* Starting point for allocating of dynamic PID's */
  RTX_EAP_PID_TRACE_CH0 = 0xF0, /* Use either 0xF0 or 0x00 (default) for the primary log channel. */
  RTX_EAP_PID_TRACE_CH1 = 0xF1, /* First alternative log channel */
  RTX_EAP_PID_TRACE_CH2 = 0xF2, /* Second alternative log channel */
  RTX_EAP_PID_TRACE_CH3 = 0xF3, /* Third alternative log channel */
  RTX_EAP_PID_TRACE_CH4 = 0xF4, /* Fourth alternative log channel */
  RTX_EAP_PID_BTCORE_TRACE = 0xF1, /* The RTX Bluetooth core always logs on the first alternative log
                                      channel. */
  RTX_EAP_PID_BROADCAST = 0xFE, /* This program id can be used from the target to indicate that the message
                                   sent should be broadcast to all clients connected to the RTX EAI Port
                                   Server. */
  RTX_EAP_PID_PC_TL = 0xFF /* This program id is reserved for usage by PC
                              simulations to connect to the RTX EAI Port Server
                              as a target. */
} RtxEapReservedProgramIdsType;

/* This type is used in mails containing target time information. It contains
   the time in 10 ms since midnight UTC */
typedef rsuint8 RtxEapTraceTimeType[3];

/* Used with RTX_EAP_TRACE_TIME. Specifies origin of real time clock used for
   time stamps. */
typedef enum
{
  RTX_EAP_RTC_FREE_RUNNING_CLOCK,  /* Probably time since init */
  RTX_EAP_RTC_DECT_FREE_RUNNING_CLOCK,  /* DECT frame and multiframe counter - 3 lowest bytes */
  RTX_EAP_RTC_RSX_LOADED_CLOCK,  /* Time loaded by PC tool */
  RTX_EAP_RTC_USER_LOADED_CLOCK,  /* Maybe entered by user or by distribution of clock */
  RTX_EAP_RTC_SNTP_SERVER_CLOCK,  /* Time from network server */
  RTX_EAP_RTC_GPS_CLOCK,  /* GPS time */
} RtxEapRtcSourceIdType;
typedef rsuint8 RtxEapRtcSourceType;

/* By default we use 8 bit timers. The project may redefine this. PC supports
   8, 16, and 32 bits timers. */
#ifndef RtxEapTimerType
typedef rsuint8 RtxEapTimerType;
#endif

/* This struct defines the generic part of a EAP request data message header. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ReturnProgramId;
  rsuint8 ReturnTaskId;
} RS_PACKED_STRUCT_END(RtxEapMessageReqHdrType);

/* This struct defines the generic part of a EAP confirm data message header. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  RTX_EAP_UINT16_DEF(Primitive);
} RS_PACKED_STRUCT_END(RtxEapMessageCfmHdrType);

/* This struct defines the generic part of a EAP request data message. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  RtxEapMessageReqHdrType Hdr;
  rsuint8 Data;
} RS_PACKED_STRUCT_END(RtxEapMessageReqType);

/* This struct defines the generic part of a EAP confirm data message. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  RtxEapMessageCfmHdrType Hdr;
  rsuint8 Data;
} RS_PACKED_STRUCT_END(RtxEapMessageCfmType);

/* This struct defines the generic part of a EAP request data packet header.
   This type is normally not used in application code. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ReturnProgramId;
  rsuint8 ReturnTaskId;
} RS_PACKED_STRUCT_END(RtxEapPackReqHdrType);

/* This struct defines the generic part of a EAP request data packet. This
   type is normally not used in application code. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  RtxEapPackReqHdrType Hdr;
  rsuint8 Data;
} RS_PACKED_STRUCT_END(RtxEapPackReqType);

/* This struct defines the generic part of a EAP confirm data packet header.
   This type is normally not used in application code. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT16_DEF(Primitive);
} RS_PACKED_STRUCT_END(RtxEapPackCfmHdrType);

/* This struct defines the generic part of a EAP confirm data packet. This
   type is normally not used in application code. */
typedef RS_PACKED_STRUCT_BEGIN
 {
  RtxEapPackCfmHdrType Hdr;
  rsuint8 Data;
} RS_PACKED_STRUCT_END(RtxEapPackCfmType);

typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
} RS_PACKED_STRUCT_END(RtxEapMessageType);

/* This message is used by the Host to test the connection to the target. */
typedef RtxEapMessageType RtxEapTestConnectionPingPongIndType;

/* This message is used by the host / PC get the version of the EAP
   implemented in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
} RS_PACKED_STRUCT_END(RtxEapVersionReqType);

/* The target uses this message to return the version of the EAP. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT32_DEF(Version); /* The EAP version supported by the target. The version number is incremented
                                  by one when major changes are made to the EAP. */
} RS_PACKED_STRUCT_END(RtxEapVersionCfmType);

/* The host uses this message to get the SW version of the firmware in the
   target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
} RS_PACKED_STRUCT_END(RtxEapSwBuildInfoReqType);

/* The target uses this message to return the SW version to the Host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramerId[8];
  RTX_EAP_UINT16_DEF(VersionHexFormat);
  rsuint8 VersionStrFormat[4];
  rsuint8 LinkDate[5];
  rsuint8 ReleaseLabelLength;
  rsuint8 ReleaseLabel[1];
} RS_PACKED_STRUCT_END(RtxEapSwBuildInfoCfmType);

/* The target uses this message to indicate to the host that the target has
   been reset. This can e.g. be used to clear all windows in the RTX Monitor when
   the target resets. (This message should only be used in ?debug systems?.) */
typedef RtxEapMessageType RtxEapTargetResetIndType;

/* The target uses this message to indicate to the host that the target has
   received the packet sent by the Host successfully. This can e.g. be used to
   implement flow control in the Host to target direction when a 3 wire serial
   cable is used to connect the PC and the Target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(ReqPrimitive); /* Identifies the message received / acknowledged. */
} RS_PACKED_STRUCT_END(RtxEapPacketCfmType);

/* The target can use this message to indicate to the Host that the target
   encountered a timeout or checksum error while receiving a packet from the
   Host. This message can also be used by the RESP to signal to a client that it
   failed to send a packet to the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(ReqPrimitive); /* Identifies the message received / acknowledged.
                                       The Primitive value may be invalid if the target e.g. has timed out
                                       before receiving the primitive part of the message sent from the Host. */
} RS_PACKED_STRUCT_END(RtxEapPacketErrorIndType);

/* This message is sued to send audio data over the EAP. This message can be
   sent both from PC and from target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 AudioHandle;   /* Identifies the connection/audio endpoint */
  rsuint8 NumberOfBytes; /* The number of audio data bytes */
  rsuint8 Data[1];       /* The audio data. */
} RS_PACKED_STRUCT_END(RtxEapAudioIndType);

/* Used to indicate current and/or changed settings of timing source from
   target. Optionally sent regularly e.g. hourly or daily to get complete time
   stamps and time source in the mail trace. The time stamps herein contains
   complete day and year information as opposed to the RTX_EAP_TRACE_TIME_*
   mails, that only contains time of day. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  RtxEapRtcSourceType NewRtcSource; /* Now timing is derived from this source */
  RtxEapRtcSourceType OldRtcSource; /* Before this mail timing was derived from this source */
  RTX_EAP_UINT32_DEF(NewUtcTime); /* Current derived UTC time in target. Unit is seconds since 1970. 0 if
                                     not available. */
  RTX_EAP_UINT32_DEF(OldUtcTime); /* Before this mail UTC time was this value. 0 if not available. */
  RtxEapTraceTimeType NewTraceTime; /* New target timestamp */
  RtxEapTraceTimeType OldTraceTime; /* Old target timestamp */
} RS_PACKED_STRUCT_END(RtxEapTargetTimeInfoIndType);

/* The host uses this message to enable the trace function in the target. The
   Host should send a RTX_EAP_TRACE_DOWNLOAD_REQ before sending this message. The
   RTX_EAP_TRACE_START_CFM message is sent with the ProgramId and TaskId stored
   in the RTX_EAP_TRACE_DOWNLOAD_REQ message. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RtxEapTraceTimeType TraceTime; /* PC timestamp. Target can choose to use this as its time source. */
} RS_PACKED_STRUCT_END(RtxEapTraceStartReqType);

/* The target uses this message to confirm the RTX_EAP_TRACE_START_REQ
   message. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  #ifdef RTX_EAP_TRACE_TIME /* PC will need to check length of this mail to
                               determine if time is included */
  RtxEapRtcSourceType RtcSource; /* Source of target time stamp */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  #ifdef RTX_EAP_ROS_COUNTERS /* PC will need to check length of this mail to
                                 determine if counters are included */
  RTX_EAP_UINT16_DEF(TaskCount); /* Number of tasks. */
  RTX_EAP_UINT16_DEF(TimerCount); /* Number of timers. */
  RTX_EAP_UINT16_DEF(PrimitiveCount); /* Number of primitives. */
  RTX_EAP_UINT16_DEF(VersionHex); /* Version. */
  rsuint8 LabelLength;   /* Length of ReleaseLabel. */
  rsuint8 Label[1];      /* ReleaseLabel. */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceStartCfmType);

/* The host uses this message to disable the trace function in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RtxEapTraceTimeType TraceTime; /* PC timestamp. Target can choose to use this as its time source. */
} RS_PACKED_STRUCT_END(RtxEapTraceStopReqType);

/* The target uses this message to confirm the RTX_EAP_TRACE_STOP_REQ message. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  #ifdef RTX_EAP_TRACE_TIME /* PC will need to check length of this mail to
                               determine if time is included */
  RtxEapRtcSourceType RtcSource; /* Source of target time stamp */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceStopCfmType);

/* This message is used to download information about enabled trace functions,
   a list of primitives to trace and a list of primitives that should be
   excluded. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  rsuint8 Data[0xFF];    /* The download data is decoded as followed:
                             rsuint8 NumberOfTasks,
                             rsuint8 LogOption[NumberOfTasks],
                             rsuint8 NumberOfLogPrimitives,
                             rsuint16 LogPrimitives[NumberOfLogPrimitives],
                             rsuint8 NumberOfExcludePrimitives,
                             rsuint16 ExcludePrimitives[NumberOfExcludePrimitives]
                             RtxEapTraceTimeType TraceTime
                            The LogOption is coded as a bit field where each bit
                            is used to enable a trace function:
                            bit 0 (0x01): Trace mails on receive.
                            bit 1 (0x02): Trace mails when sent.
                            bit 2 (0x04): Enable trace of timers.
                            bit 3 (0x08): Enable heap trace.
                            bit 4 (0x10): Enable ?task trace functions? (RDBG_STATELOG).
                            bit 5 (0x20): Enable ?printf()?.
                            bit 6 (0x40): Reserved.
                            bit 7 (0x80): Reserved.
                            The ?Task Trace Functions? include the following:
                            Log comment
                            PDU trace
                            Trace of function calls
                            The ?Task Trace Functions? are characterised by the
                            fact that the trace data is generated by the task
                            implementation directly.
                            LogPrimitives[] is used to enable logging of some
                            mails without having to enable all mails sent from a task.
                            ExcludePrimitives[] is used to exclude some mails
                            from the trace. */
} RS_PACKED_STRUCT_END(RtxEapTraceDownloadReqType);

/* The target uses this message to confirm the RTX_EAP_TRACE_DOWNLOAD_REQ
   message. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  #ifdef RTX_EAP_TRACE_TIME /* PC will need to check length of this mail to
                               determine if time is included */
  RtxEapRtcSourceType RtcSource; /* Source of target time stamp */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  #ifdef RTX_EAP_ROS_COUNTERS /* PC will need to check length of this mail to
                                 determine if counters are included */
  RTX_EAP_UINT16_DEF(TaskCount); /* Number of tasks. */
  RTX_EAP_UINT16_DEF(TimerCount); /* Number of timers. */
  RTX_EAP_UINT16_DEF(PrimitiveCount); /* Number of primitives. */
  RTX_EAP_UINT16_DEF(VersionHex); /* Version. */
  rsuint8 LabelLength;   /* Length of ReleaseLabel. */
  rsuint8 Label[1];      /* ReleaseLabel. */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceDownloadCfmType);

/* This message is used to download information about enabled trace functions,
   a list of primitives to trace and a list of primitives that should be
   excluded. The trace is enabled when the download data is saved. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* Identifies the host that has enabled the trace and
                            hence the application that should receive the trace
                            data. The RTX Monitor uses F0-F4 to specify the log
                            channel to be used. */
  rsuint8 TaskId;        /* Used by RSX only. */
  rsuint8 Data[0xFF];    /* See the description of RTX_EAP_TRACE_DOWNLOAD_REQ */
} RS_PACKED_STRUCT_END(RtxEapTraceDownloadStartReqType);

/* This message is used to send a copy of a mail to the host when the mail is
   sent from a task in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 Sender;        /* The id of the task that has sent the mail. */
  rsuint8 Receiver;      /* The id of the task that has received the mail. */
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Data[]. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  rsuint8 Data[1];       /* Copy of the mail. */
} RS_PACKED_STRUCT_END(RtxEapTraceOutputMailIndType);

/* This message is used to send a copy of a mail to the host when the mail is
   received by a task in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 Sender;        /* The id of the task that has sent the mail. */
  rsuint8 Receiver;      /* The id of the task that has received the mail. */
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Data[]. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  rsuint8 Data[1];       /* Copy of the mail. */
} RS_PACKED_STRUCT_END(RtxEapTraceInputMailIndType);

/* This message is used to send a copy of a mail to the host when the mail is
   received by a task in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 Sender;        /* The id of the task that has sent the mail. */
  rsuint8 Receiver;      /* The id of the task that has received the mail. */
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Data[]. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  RTX_EAP_UINT16_DEF(ProcTime); /* The time it took to process the mail in
RsPerformanceTimeType format. */
  rsuint8 Data[1];       /* Copy of the mail. */
} RS_PACKED_STRUCT_END(RtxEapTraceInputMail2IndType);

/* DEPRECATED: PC should recognize this mail for backwards compatibility.
   Targets should not use it! It has been deprecated because of compatibility issues
   This message is used to send a text from a task in the target to the host.
   The host should write the text to the same destination (window or file) as
   mails logged from that task. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has generated this
                            message. */
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Data[]. */
  rsuint8 Data[1];       /* ASCII string */
} RS_PACKED_STRUCT_END(RtxEapTraceCommentIndType);

/* This message is used to send a text from a task in the target to the host.
   The host should write the text to the same destination (window or file) as
   mails logged from that task. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has generated this
                            message. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Data[]. */
  rsuint8 Data[1];       /* ASCII string */
} RS_PACKED_STRUCT_END(RtxEapTraceComment2IndType);

/* The target uses this message to indicate to the host that the trace
   function in the target has been disabled. This message is typically used as a
   result of an error in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceStopIndType);

/* The target uses this message to trace PDU?s send to and received from a
   remote device. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has logged the PDU */
  rsuint8 ProtocolId;    /* Identifies the protocol. It may be necessary to
                            specify two ProtocolId?s: one for send and one for
                            receive. */
  rsuint8 Direction;     /* 0 if the PDU is received and 1 if the PDU is sent. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Pdu[]. */
  rsuint8 Pdu[1];        /* Copy of the PDU. */
} RS_PACKED_STRUCT_END(RtxEapTracePduIndType);

/* The target uses this message to trace function calls. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that logs the function. */
  RTX_EAP_UINT16_DEF(FunctionId); /* Identifies the function. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Parameters[]. */
  rsuint8 Parameters[1]; /* Copy of the parameters to the function. */
} RS_PACKED_STRUCT_END(RtxEapTraceFunctionIndType);

/* The target uses this message to send ?raw data? to the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that logs the data. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Data[]. */
  rsuint8 Data[1];       /* Copy of data. */
} RS_PACKED_STRUCT_END(RtxEapTraceDataIndType);

/* The target uses this message to send project specific trace data to the
   host. If the host is the RTX Monitor then the data included in this message is
   passed to the ?trace decode DLL? which decodes the data and returns a string
   to the RTX Monitor. It is only the target and the ?trace decode DLL? that
   needs to know the format of the trace data. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that logs the data. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
  RTX_EAP_UINT16_DEF(Length); /* The number of bytes stored in Data[]. */
  rsuint8 Data[1];       /* Trace data */
} RS_PACKED_STRUCT_END(RtxEapTraceIndType);

/* The target uses this message to send information about a runtime error
   detected in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has detected the runtime
                            error. */
  RTX_EAP_UINT32_DEF(LineNumber); /* The line number in which the runtime error is detected. */
  RTX_EAP_UINT16_DEF(FileNameLength); /* The number of bytes stored in FileName[]. */
  rsuint8 FileName[1];   /* The name of the file in which the runtime error is
                            detected. */
} RS_PACKED_STRUCT_END(RtxEapRuntimeErrorIndType);

/* The target uses this message to send information about an assert detected
   in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has detected the runtime
                            error. */
  RTX_EAP_UINT32_DEF(LineNumber); /* The line number in which the assert is detected. */
  RTX_EAP_UINT16_DEF(FileNameLength); /* The number of bytes stored in FileName[]. */
  rsuint8 FileName[1];   /* The name of the file in which the assert is
                            detected. */
} RS_PACKED_STRUCT_END(RtxEapAssertIndType);

/* These mails are reserved to avoid conflict with RSX and older versions */
typedef RtxEapMessageType RtxEapReservedMail2Type;

/* This message is sent from the target to the host when a static timer is
   started. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has started the timer. */
  RtxEapTimerType TimerId; /* The id of the timer. The PC must determine the
                              size of the timer based on the length of the mail. */
  RTX_EAP_UINT16_DEF(Time); /* The time. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceStartTimerIndType);

/* This message is sent from the target to the host when a static timer is
   stopped. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has stopped the timer. */
  RtxEapTimerType TimerId; /* The id of the timer. The PC must determine the
                              size of the timer based on the length of the mail. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceStopTimerIndType);

/* This message is sent from the target to the host when a static timer is
   started. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has started the timer. */
  RTX_EAP_UINT16_DEF(TimerId); /* The id of the timer. */
  RTX_EAP_UINT32_DEF(Time); /* The time. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceStartExtimerIndType);

/* This message is sent from the target to the host when a static timer is
   stopped. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has stopped the timer. */
  RTX_EAP_UINT16_DEF(TimerId); /* The id of the timer. */
  #ifdef RTX_EAP_TRACE_TIME /* Only if defined use RTX_EAP_TRACE_TIME_*
                               primitive. */
  RtxEapTraceTimeType TraceTime; /* Target timestamp */
  #endif
} RS_PACKED_STRUCT_END(RtxEapTraceStopExtimerIndType);

/* RTX Monitor only.
   This message is sent form the target to the host when a RT timer is created. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has created the timer. */
  RTX_EAP_UINT32_DEF(TimerId); /* The id of the timer. */
} RS_PACKED_STRUCT_END(RtxEapTraceCreateRtTimerIndType);

/* RTX Monitor only.
   This message is sent form the target to the host when a RT timer is
   destroyed. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has destroyed the timer. */
  RTX_EAP_UINT32_DEF(TimerId); /* The id of the timer. */
} RS_PACKED_STRUCT_END(RtxEapTraceDestroyRtTimerIndType);

/* RTX Monitor only.
   This message is sent form the target to the host when a RT timer is started. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has started the timer. */
  RTX_EAP_UINT32_DEF(TimerId); /* The id of the timer. */
  RTX_EAP_UINT32_DEF(Time); /* The time. */
} RS_PACKED_STRUCT_END(RtxEapTraceStartRtTimerIndType);

/* RTX Monitor only.
   This message is sent form the target to the host when a RT timer is stopped. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has stopped the timer. */
  RTX_EAP_UINT32_DEF(TimerId); /* The id of the timer. */
} RS_PACKED_STRUCT_END(RtxEapTraceStopRtTimerIndType);

/* RTX Monitor only.
   This message is sent form the target to the host when a heap block is
   allocated. The RTX Monitor uses the RTX_EAP_MEMORY_READ_REQ message (see
   section 11.2.2) to read the content of the heap block in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has allocated the heap
                            block. */
  RTX_EAP_UINT32_DEF(Address); /* The address of the heap block returned to the task. */
  RTX_EAP_UINT16_DEF(Size); /* The size of the heap block. */
} RS_PACKED_STRUCT_END(RtxEapTraceMemAllocIndType);

/* RTX Monitor only.
   This message is sent form the target to the host when a heap block is
   de-allocated. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has de-allocated the heap
                            block. */
  RTX_EAP_UINT32_DEF(Address); /* The address of the heap block. */
} RS_PACKED_STRUCT_END(RtxEapTraceMemFreeIndType);

/* RTX Monitor only.
   The target uses this message to add a watch in the host. The RTX Monitor uses
   the RTX_EAP_MEMORY_READ_REQ message (see section 11.2.2) to read the value of
   the watch in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TraceCounter;
  rsuint8 TaskId;        /* The id of the task that has created the watch. */
  RTX_EAP_UINT32_DEF(Address); /* The address of the variable. */
  RTX_EAP_UINT16_DEF(Size); /* The size of the variable. */
  RTX_EAP_UINT16_DEF(NameLength); /* The number of bytes stored in Name[]. */
  rsuint8 Name[1];       /* The name of the variable. */
} RS_PACKED_STRUCT_END(RtxEapTraceAddWatchIndType);

/* This message is used to enable the ?printf()? function in the target. Used
   by RSX only. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
} RS_PACKED_STRUCT_END(RtxEapPrintfStartReqType);

/* This message is used to enable the ?printf()? function for a specified task
   in target. The target does not send a confirm message when this request is
   received. Used by RSX only. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
} RS_PACKED_STRUCT_END(RtxEapPrintfStartReqNoCfmType);

/* The target uses this message to confirm the RTX_EAP_PRINTF_START_REQ
   message. Used by RSX only. */
typedef RtxEapMessageType RtxEapPrintfStartCfmType;

/* The host uses this message to disable the printf function in the target.
   Used by RSX only. */
typedef RtxEapMessageType RtxEapPrintfStopReqType;

/* The target uses this message to confirm the RTX_EAP_PRINTF_STOP_REQ
   message. Used by RSX only. */
typedef RtxEapMessageType RtxEapPrintfStopCfmType;

/* This message is used by the target to send a string printed by a task with
   the printf() function to the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TaskId;        /* The Task id of the task that has called the
                            ?printf()? function. */
  rsuint8 Length;        /* The length of following Data parameter. */
  rsuint8 Data[1];       /* The string generated by ?printf()?. */
} RS_PACKED_STRUCT_END(RtxEapPrintfIndType);

/* This message is used by the target to clear a tasks screen window in the
   host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TaskId;        /* The Task id of the task that has wants to clear
                            the screen. */
} RS_PACKED_STRUCT_END(RtxEapClearScreenIndType);

/* The target uses this message to move the cursor position on a tasks screen
   window. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TaskId;        /* The Task id of the task that has wants to change
                            the cursor position on the screen. */
  rsuint8 X;             /* Specifies the character position on the line. 1
                            identifies the first character in a line. */
  rsuint8 Y;             /* Specifies the line number. 1 identifies the first
                            line (the top most line) in the screen window. */
} RS_PACKED_STRUCT_END(RtxEapScreenGotoxyIndType);

/* The target uses this message to send data represented on one of the graph
   windows that can be shown by the host (RTX Monitor). */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 GraphId;       /* Identifies the graph window in the RTX Monitor. */
  rsuint8 LineId;        /* If Options.bit0 is 0 LineId identifies a line in
                            the graph window. Valid range is 0 to 9.
                            If Options.bit0 is 1 LineId holds the number of
                            lines for which line data is stored in the Data[]. */
  rsuint8 DataElementSize; /* 1, 2 or 4 bytes data elements in Data[]. E.g. 2
                              indicate that data is an array of 16 bit integers. */
  rsuint8 Options;       /* bit0:  0 = Data[] contains only data for a single
                            line (default). 1 =  The Data[] contains data for
                            multiple lines.
                            bit1: 0 = Clear the line data of the specified line
                            in the graph before update (default). 1 = Append data
                            to the graph.
                            bit2 ? bit7: Reserved. Should be set to 0 always. */
  RTX_EAP_UINT16_DEF(SampleCount); /* Specifies the number of samples (for each line) stored in Data[]. */
  rsuint8 Data[1];       /* The graph data. If bit 0 of Options is set the
                            Data[] holds line data for multiple lines. The number
                            of lines is stored in LineId in this case, and the
                            line data is pre-pended with a byte specifying the
                            line id. I.e. Data = {rsuint8 LineId, rsuintX
                            Line0Data[SampleCount], rsuint8 LineId, rsuintX
                            Line1Data[sampleCount]?}. */
} RS_PACKED_STRUCT_END(RtxEapGraphDataIndType);

/* The target uses this message to send data represented on one of the graph
   windows that can be shown by the host (RTX Monitor). This message is used to
   update / add samples to all lines represented on a graph. This can e.g. be
   used to make a performance monitor. The RTX Monitor can draw 10 independent
   graphs in each of the graph windows. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 GraphId;       /* Identifies the graph window in the RTX Monitor. */
  rsuint8 NumberOfLines; /* The number of elements in the LineData[] array.
                            (max 10 is supported by the RTX Monitor) */
  rsuint8 DataElementSize; /* 1, 2 or 4 bytes data elements in Data[]. E.g. 2
                              indicates that data is an array of 16 bit integers. */
  rsuint8 Options;       /* bit0:  0 = LineData[] holds only a single sample
                            of each line (default). 1 = LineData[] contains
                            multiple samples of each line.
                            bit1: 0 = Append data to the graph (default). 1 =
                            Clear all lines on the graph before update.
                            bit2 ? bit7: Reserved. Should be set to 0 always. */
  rsuint8 LineData[1];   /* The graph data. If bit0 of Options is set to 1 the
                            line data is encoded as a 16 bit value holding the
                            sample count followed by an array of ?sample count?
                            line samples.  I.e. LineData = {rsuint16 SampleCount,
                            rsuintX LineSample0[NumberOfLines],  rsuintX
                            LineSample1[NumberOfLines], ?}. */
} RS_PACKED_STRUCT_END(RtxEapGraphUpdateIndType);

/* The target uses this message to create a graph window in the RTX Monitor. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 GraphId;       /* Identifies the graph window in the RTX Monitor. */
  rsuint8 GraphConfig;   /* bit0: 1 = Auto scale on. 0 = Auto scale off.
                            bit1: 1 = Plot graph as PC time (X-axis = PC time),
                            versus Y-axis Line1,Line2, etc.
                            bit2: 1 = Plot graph as x,y ... (X-axis = line0),
                            versus Y-axis Line1, Line2, etc.
                            bit3-bit6: Reserved .Should be set to 0 always.
                            bit7: Extended options used to extend this message
                            with more options. Should be set to 0 always.
                            (Extended options are TBD) */
  rsuint8 Options;       /* bit0: 1 = All lines are treated as signed. 0 = All
                            lines are treated as unsigned (default).
                            bit1 - bit7: Reserved. Should be set to 0 always. */
  rsuint8 NameLength;    /* The number of bytes stored in Name[]. */
  rsuint8 Name[1];       /* The name of the graph. Must be ?\0? terminated. */
} RS_PACKED_STRUCT_END(RtxEapAddGraphIndType);

/* The target uses this message to add a line to a graph window in the RTX
   Monitor. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 GraphId;       /* Identifies the graph window in the RTX Monitor. */
  rsuint8 LineId;        /* Identifies a line in the graph window.
                            Valid range is 0 to 9. */
  RTX_EAP_UINT32_DEF(MaxY); /* The maximum value of the Y-axis. */
  RTX_EAP_UINT16_DEF(Yscale); /* Used to scale the y axis. */
  rsuint8 Options;       /* bit0: 1 = Treat this line as signed.
                            bit1: 1 = Treat this line as unsigned.
                            bit2: 1 = Plot data as dots only.
                            bit3: 1 = Plot line as stairs.
                            bit4: 1 = Plot data binary (one line for each bit).
                            bit5 ? bit7: Reserved. Should be set to 0 always. */
  rsuint8 Reserved;      /* Should be set to 0 always. */
  rsuint8 NameLength;    /* The number of bytes stored in Name[]. */
  rsuint8 Name[1];       /* The name of the line. Must be ?\0? terminated. */
} RS_PACKED_STRUCT_END(RtxEapAddLineToGraphIndType);

/* The target uses this message to remove a graph window from the RTX Monitor. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 GraphId;       /* Identifies the graph window in the RTX Monitor. */
} RS_PACKED_STRUCT_END(RtxEapRemoveGraphIndType);

/* The host can use this message to send a key code to a task in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* The program id that should be used when
                            RTX_EAP_KEY_PRESS_CFM is returned to the host. */
  rsuint8 TaskId;        /* The task id that should be used when
                            RTX_EAP_KEY_PRESS_CFM is returned to the host. */
  RTX_EAP_UINT32_DEF(KeyCode); /* Identifies the key pressed. */
} RS_PACKED_STRUCT_END(RtxEapKeyPressReqType);

/* The target uses this message to confirm that it has received an
   RTX_EAP_KEY_PRESS_REQ message. */
typedef RtxEapMessageType RtxEapKeyPressCfmType;

/* This message is used to request a list of connected targets from the RTX
   Trace Server. */
typedef RtxEapMessageType RtxEapTraceserverGetListReqType;

/* The RTX Trace Server uses this message to return information about the
   targets connected. One mail is sent for each target connected to the trace
   server followed by one where the Id is ?1 indicating end of list. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT32_DEF(Id); /* Index (socket descriptor), -1 means end of list. */
  rsuint8 IpAddr[4];     /* IP of target. */
  RTX_EAP_UINT16_DEF(TcpPort); /* Port number used from target. */
  rsuint8 Description[1]; /* Variable length 0-term string describing the
                             target. */
} RS_PACKED_STRUCT_END(RtxEapTraceserverGetListCfmType);

/* This message is used by the trace program to select one of the targets
   connected to the RTX Trace Server. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT32_DEF(Id); /* Index (socket descriptor). */
} RS_PACKED_STRUCT_END(RtxEapTraceserverSelectTargetReqType);

/* This message is sent from the RTX Trace Server when the trace program has
   been connected to the selected target. */
typedef RtxEapMessageType RtxEapTraceserverSelectTargetCfmType;

/* This message is sent from the RTX Trace Server if it is not able to
   establish a connection from the trace program to the selected target. */
typedef RtxEapMessageType RtxEapTraceserverSelectTargetRejType;

/* The target uses this message to add a description of the target to the
   target list in the RTX Trace server. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 Description[1]; /* Variable length 0-term string describing the
                             target. */
} RS_PACKED_STRUCT_END(RtxEapTraceserverTargetDescIndType);

/* The RTX Trace server uses this message to request a connection to a new
   target. */
typedef RtxEapMessageType RtxEapTraceserverConnectTargetReqType;

/* This message is sent from the target to the RTX Trace Server when the trace
   program has been connected to the target. */
typedef RtxEapMessageType RtxEapTraceserverConnectTargetCfmType;

/* This message is sent from the target to the RTX Trace Server it the
   connection request is rejected. */
typedef RtxEapMessageType RtxEapTraceserverConnectTargetRejType;

/* The host uses this message to read some data from the memory in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* The program id that should be used in when the
                            requested data is returned to the host. */
  rsuint8 TaskId;        /* The task id that should be used in when the
                            requested data is returned to the host. */
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
  RTX_EAP_UINT32_DEF(Address);
  RTX_EAP_UINT16_DEF(NumberOfBytes);
} RS_PACKED_STRUCT_END(RtxEapMemoryReadReqType);

/* The target uses this message to return the data requested by the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
  RTX_EAP_UINT32_DEF(Address);
  RTX_EAP_UINT16_DEF(NumberOfBytes);
  rsuint8 Data[1];
} RS_PACKED_STRUCT_END(RtxEapMemoryReadCfmType);

/* The host uses this message to write some data to a memory block in the
   target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* The program id that should be used in when
                            RTX_EAP_MEMORY_WRITE_CFM is sent back to the host. */
  rsuint8 TaskId;        /* The task id that should be used in when
                            RTX_EAP_MEMORY_WRITE_CFM is sent back to the host. */
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
  RTX_EAP_UINT32_DEF(Address);
  RTX_EAP_UINT16_DEF(NumberOfBytes);
  rsuint8 Data[1];
} RS_PACKED_STRUCT_END(RtxEapMemoryWriteReqType);

/* The target uses this message to confirm the RTX_EAP_MEMORY_WRITE_REQ
   message. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
} RS_PACKED_STRUCT_END(RtxEapMemoryWriteCfmType);

/* This message is used to fill a piece of memory with a specified value. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
  RTX_EAP_UINT32_DEF(Address);
  RTX_EAP_UINT32_DEF(NumberOfBytes);
  rsuint8 NewValue;
} RS_PACKED_STRUCT_END(RtxEapMemoryMemsetReqType);

/* The target uses this message to confirm the RTX_EAP_MEMORY_MEMSET_REQ
   message. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
} RS_PACKED_STRUCT_END(RtxEapMemoryMemsetCfmType);

/* This message is used to fill a piece of memory with default information
   stored in const. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
  RTX_EAP_UINT32_DEF(Option); /* Project specific option. */
} RS_PACKED_STRUCT_END(RtxEapMemorySetDefaultReqType);

/* The target uses this message to confirm the RTX_EAP_MEMORY_SET_DEFAULT_REQ
   message. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(MemoryId); /* 0: RAM
                                   1: Register
                                   2: NVS
                                   3: DSP
                                   4: FPGA
                                   5: Sequencer
                                   6-FFFE: Reserved
                                   FFFF: Project specific */
} RS_PACKED_STRUCT_END(RtxEapMemorySetDefaultCfmType);

/* The host uses this message to write some data to the RAM in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT32_DEF(Address);
  rsuint8 NumberOfBytes;
  rsuint8 Data[1];
} RS_PACKED_STRUCT_END(RtxEapRamWriteReqType);

/* The host uses this message to read some data from the RAM in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT32_DEF(Address);
  rsuint8 NumberOfBytes;
} RS_PACKED_STRUCT_END(RtxEapRamReadReqType);

/* The target uses this message to return the data requested by the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT32_DEF(Address);
  rsuint8 NumberOfBytes;
  rsuint8 Data[1];
} RS_PACKED_STRUCT_END(RtxEapRamReadCfmType);

/* The target uses this message to confirm the RTX_EAP_RAM_WRITE_REQ message. */
typedef RtxEapMessageType RtxEapRamWriteCfmType;

/* This message is used to fill a piece of memory with a specified value. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT32_DEF(Address);
  RTX_EAP_UINT32_DEF(NumberOfBytes);
  rsuint8 Value;
} RS_PACKED_STRUCT_END(RtxEapRamMemsetReqType);

/* The target uses this message to confirm the RTX_EAP_RAM_MEMSET_REQ message. */
typedef RtxEapMessageType RtxEapRamMemsetCfmType;

/* The Host uses this message to read data from the NVC in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT16_DEF(Address);
  rsuint8 NumberOfBytes;
} RS_PACKED_STRUCT_END(RtxEapNvsReadReqType);

/* The target uses this message to return the requested NVS data to the Host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(Address);
  rsuint8 NumberOfBytes;
  rsuint8 Data[1];
} RS_PACKED_STRUCT_END(RtxEapNvsReadCfmType);

/* The Host uses this message to write data to the NVS in the target. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  RTX_EAP_UINT16_DEF(Address);
  rsuint8 NumberOfBytes;
  rsuint8 Data[1];
} RS_PACKED_STRUCT_END(RtxEapNvsWriteReqType);

/* The target uses this message to confirm the RTX_EAP_NVS_WRITE_REQ message.
   The host can assume the NVS has been updated when this message is received
   from the host. */
typedef RtxEapMessageType RtxEapNvsWriteCfmType;

/* This message is used to request the target to write the default NVS
   parameters to the NVS. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 DefaultType;   /* 0=preserve adjustment parameters
                            1=forced default */
} RS_PACKED_STRUCT_END(RtxEapNvsSetDefaultReqType);

/* The target uses this message to confirm the RTX_EAP_NVS_SET_DEFAULT_REQ
   message. It is sent from the target when the default programming of the NVS is
   started. This message is sent back to the Host using the ProgramId used by the
   host when the request message was sent and TaskId = 0. This is done because
   the originating ProgramId and TaskId are not included in the request message. */
typedef RtxEapMessageType RtxEapNvsSetDefaultCfmType;

/* This message is used to request the state of the NVS cache. */
typedef RtxEapMessageType RtxEapNvsCacheEmptyReqType;

/* This message is used to return the state of the NVS cache. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 CacheEmpty;    /* TRUE if the cache is empty and FALSE otherwise. */
} RS_PACKED_STRUCT_END(RtxEapNvsCacheEmptyCfmType);

/* This message is used to request the target to change the active domain. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  rsuint8 NewDomainId;
} RS_PACKED_STRUCT_END(RtxEapNvsSetDomainReqType);

/* The target uses this message to confirm the RTX_EAP_NVS_SET_DOMAIN_REQ
   message. It is sent from the target when the active domain in NVS has been
   set. */
typedef RtxEapMessageType RtxEapNvsSetDomainCfmType;

/* This message is used to request the target to return the size of a given
   domain. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;
  rsuint8 TaskId;
  rsuint8 DomainId;      /* The ID of the domain which to get the size of */
} RS_PACKED_STRUCT_END(RtxEapNvsGetDomainSizeReqType);

/* The target uses this message to confirm the RTX_EAP_NVS_GET_DOMAIN_SIZE_REQ
   message. It is sent from the target when the domain size has been calculated. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT32_DEF(DomainSize); /* The size, in bytes, of the given domain. */
} RS_PACKED_STRUCT_END(RtxEapNvsGetDomainSizeCfmType);

/* This message is used to start a module test and set the task id of the task
   under test. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 TestedTask;
  rsuint8 ModulTstProgramId;
} RS_PACKED_STRUCT_END(RtxEapModuleTestStartReqType);

/* This message indicates that the module test is finished. */
typedef RtxEapMessageType RtxEapModuleTestStopReqType;

/* This message is used to send a project specific test command to the target.
   The function RTX_EAI_PROJECT_TEST_HANDLER() is called when this request is
   received. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* The program id that should be used in when a
                            RTX_EAP_PROJECT_TEST_CFM is sent back to the host. */
  rsuint8 TaskId;        /* The task id that should be used in when a
                            RTX_EAP_PROJECT_TEST_CFM is sent back to the host. */
  RTX_EAP_UINT16_DEF(Opcode); /* Project specific op-code identifying the
                                 command. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapProjectTestReqType);

/* This message is used to send a response to a project specific test command
   to the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(Opcode); /* Project specific op-code identifying the
                                 response. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapProjectTestCfmType);

/* This message is used to send a RF test command to the target. The function
   RTX_EAI_RF_TEST_HANDLER() is called when this request is received. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* The program id that should be used in when a
                            RTX_EAP_RF_TEST_CFM is sent back to the host. */
  rsuint8 TaskId;        /* The task id that should be used in when a
                            RTX_EAP_RF_TEST_CFM is sent back to the host. */
  RTX_EAP_UINT16_DEF(Opcode); /* Op-code identifying the RF test command. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapRfTestReqType);

/* This message is used to send a response to a RF test command to the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(Opcode); /* Op-code identifying the response. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapRfTestCfmType);

/* This message is used to send a HW test command to the target. The function
   RTX_EAI_HW_TEST_HANDLER() is called when this request is received. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* The program id that should be used in when a
                            RTX_EAP_HW_TEST_CFM is sent back to the host. */
  rsuint8 TaskId;        /* The task id that should be used in when a
                            RTX_EAP_HW_TEST_CFM is sent back to the host. */
  RTX_EAP_UINT16_DEF(Opcode); /* Op-code identifying the HW test command. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapHwTestReqType);

/* This message is used to send a response to a HW test command to the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(Opcode); /* Op-code identifying the response. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapHwTestCfmType);

/* This message is used to send a SW test command to the target. The function
   RTX_EAI_SW_TEST_HANDLER() is called when this request is received. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  rsuint8 ProgramId;     /* The program id that should be used in when a
                            RTX_EAP_SW_TEST_CFM is sent back to the host. */
  rsuint8 TaskId;        /* The task id that should be used in when a
                            RTX_EAP_SW_TEST_CFM is sent back to the host. */
  RTX_EAP_UINT16_DEF(Opcode); /* Op-code identifying the RF test command. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapSwTestReqType);

/* This message is used to send a response to a SW test command to the host. */
typedef RS_PACKED_STRUCT_BEGIN
{
  RTX_EAP_UINT16_DEF(Primitive);
  RTX_EAP_UINT16_DEF(Opcode); /* Op-code identifying the response. */
  RTX_EAP_UINT16_DEF(Length); /* The total length in bytes of the parameters. */
  rsuint8 Parameters[1]; /* Optional parameters. */
} RS_PACKED_STRUCT_END(RtxEapSwTestCfmType);

#if (RTX_CORE_VERSION >= 0x0224)
  #include <Standard/Common/RsPopPack.h>
#else
  #ifdef RTX_EAP_INCLUDE_ALIGN_HEADER_FILE
    #include <Modules/Defines/AlignDef.h> // used to set default alignment with #pragma
  #endif
#endif

/****************************************************************************
*                           Global variables/const
****************************************************************************/


/****************************************************************************
*                             Function prototypes
****************************************************************************/

#endif /* RTXEAP_H */


